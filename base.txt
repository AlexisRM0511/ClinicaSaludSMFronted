
  onDeleteUser(uid: string): Promise<void> {
    return new Promise(async (resolve, reject) => {
      try {
        const result = await this.userCollection.doc(uid).delete();
        resolve(result);
      } catch (error) {
        reject(error);
      }
    })
  }


  onSaveUser(uid: string,userNew:UserInterface): Promise<void> { 
    return new Promise(async (resolve, reject) => {
      try {
        const result = await this.userCollection.doc(uid).set(userNew)
        resolve(result)
      } catch (error) {
        reject(error)
      }
    }
  }

  private getUsers(): void { 
    this.users = this.userCollection.snapshotChanges().pipe(
      map(actions => actions.map(a => a.payload.doc.data() as UserInterface)
    }
  }